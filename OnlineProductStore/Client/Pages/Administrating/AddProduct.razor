@page "/admin/addproduct"

@using System.Text.Json
@using System.Text
@using System.Net
@layout AdminPanelLayout

@inject HttpClient _httpClient;
@inject NavigationManager _navigationManager

<div class="row">
    <div class="col-md-6 offset-3">
        <div class="row sticky-top mb-1">
            <div class="col-md-8 mt-1"><h3 class="text-muted" style="font-family:'Javanese Text'">Add Product</h3></div>
        </div>

        <EditForm Model="@newProduct" OnValidSubmit="OnAddProduct">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary class="form-control p-3"></ValidationSummary>
            <div class="form-group mt-2">
                <div class="alert alert-@CssClass">@Message</div>
            </div>
            <div class="form-group mt-2">
                <label class="form-label" for="title">Name</label>
                <InputText id="title" @bind-Value="newProduct.Name" class="form-control"></InputText>
                <ValidationMessage For="@(()=> newProduct.Name)"></ValidationMessage>
            </div>
            <div class="form-group mt-2">
                <label class="form-label" for="url">Original Price</label>
                <input type="text" id="price" min="0.5" @bind="newProduct.OriginalPrice" class="form-control"></input>
                <ValidationMessage For="@(()=> newProduct.OriginalPrice)"></ValidationMessage>
            </div>
            <div class="form-group mt-2">
                <label class="form-label" for="url">New Price</label>
                <input type="text" id="price" min="0.5" @bind="newProduct.Price" class="form-control"></input>
                <ValidationMessage For="@(()=> newProduct.Price)"></ValidationMessage>
            </div>
            <div class="form-group mt-2">
                <label class="form-label" for="description">Description</label>
                <InputTextArea id="description" @bind-Value="newProduct.Description" class="form-control"></InputTextArea>
                <ValidationMessage For="@(()=> newProduct.Description)"></ValidationMessage>
            </div>
            <div class="form-group mt-2">
                <label class="form-label" for="description">Quantity</label>
                <input type="number" id="description" min="1" @bind="newProduct.Quantity" class="form-control"></input>
                <ValidationMessage For="@(()=> newProduct.Quantity)"></ValidationMessage>
            </div>
            <div class="form-group mt-2">
                <label class="form-label" for="image">Image</label>&nbsp; <span class="text-danger fw-bold">@uploadMessage</span>
                <InputFile id="image" OnChange="OnFileChange" class="form-control"></InputFile>
                <ValidationMessage For="@(()=> newProduct.Image)"></ValidationMessage>
            </div>
            <div class="form-check mt-2">
                <button type="submit" class="btn btn-primary"> <i class="oi oi-plus"></i> Create</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    public Product newProduct = new Product() { Name = "", Description = "", OriginalPrice = 0};
    private string? uploadMessage;
    private string? Message = string.Empty;
    private string? CssClass = string.Empty;

    private async Task OnAddProduct()
    {
        var jsonPayload = JsonSerializer.Serialize(newProduct);
        var requestContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
        var response = await _httpClient.PostAsync(APIEndpoints.AddNewProductEndpoint, requestContent);
        
        if (response.StatusCode == HttpStatusCode.OK)
        {
            _navigationManager.NavigateTo("/admin/products");
        }
    }


    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);
        if (fileInfo.Extension.ToLower().Contains(".jpg"))
        {
            uploadMessage = "";
            var format = "image/jpg";
            var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            //var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            var imageData = Convert.ToBase64String(buffer);
            newProduct.Image = imageData;
        }
        else { uploadMessage = "Invalid file selected (only JPG file)"; }
    }
}