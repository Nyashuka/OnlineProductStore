@page "/admin/create-category"

@layout AdminPanelLayout

@using System.Text.Json
@using System.Text
@using System.Net
@using OnlineProductStore.Shared.DTO

@inject IHttpClientFactory _httpClientFactory;
@inject NavigationManager _navigationManager

<div class="row">
    <div class="col-md-6 offset-3">
        <div class="row sticky-top mb-1">
            <div class="col-md-8 mt-1"><h3 class="text-muted" style="font-family:'Javanese Text'">Add Product</h3></div>
        </div>

        <EditForm Model="@categoryDTO" OnValidSubmit="OnAddCategory">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary class="form-control p-3"></ValidationSummary>
            <div class="form-group mt-2">
                <div class="alert alert-@CssClass">@Message</div>
            </div>
            <div class="form-group mt-2">
                <label class="form-label" for="title">Name</label>
                <InputText id="title" @bind-Value="categoryDTO.Name" class="form-control"></InputText>
                <ValidationMessage For="@(()=> categoryDTO.Name)"></ValidationMessage>
            </div>
            <div class="form-group mt-2">
                <label class="form-label" for="title">Category Url</label>
                <InputText id="title" @bind-Value="categoryDTO.Url" class="form-control"></InputText>
                <ValidationMessage For="@(()=> categoryDTO.Url)"></ValidationMessage>
            </div>

            <div class="form-group mt-2">
                <label class="form-label" for="image">Icon</label>&nbsp; <span class="text-danger fw-bold">@uploadMessage</span>
                <InputFile id="image" OnChange="OnFileChange" class="form-control"></InputFile>
                <ValidationMessage For="@(()=> categoryDTO.Icon)"></ValidationMessage>
            </div>
            <div class="form-check mt-2">
                <button type="submit" class="btn btn-primary"> <i class="oi oi-plus"></i> Create</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CategoryDTO categoryDTO = new CategoryDTO();

    private string? uploadMessage;
    private string? Message = string.Empty;
    private string? CssClass = string.Empty;

    private async Task OnAddCategory()
    {
        var jsonPayload = JsonSerializer.Serialize(categoryDTO);
        var requestContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
        var httpClient = _httpClientFactory.CreateClient("Dot7Api");
        var response = await httpClient.PostAsync(APIEndpoints.AddNewCategorytEndpoint, requestContent);

        if (response.StatusCode == HttpStatusCode.OK)
        {
            _navigationManager.NavigateTo(APIEndpoints.AddNewCategorytEndpoint);
        }
    }


    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);
        if (fileInfo.Extension.ToLower().Contains(".jpg"))
        {
            uploadMessage = "";
            var format = "image/jpg";
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            categoryDTO.Icon = imageData;

        }
        else { uploadMessage = "Invalid file selected (only JPG file)"; }
    }
}